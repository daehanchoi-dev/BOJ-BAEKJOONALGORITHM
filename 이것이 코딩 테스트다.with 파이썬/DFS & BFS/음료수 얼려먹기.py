"""
n x m 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.

입력조건 :
- 첫 번째 줄에 얼음 틀의 세로 길이 n 과 가로 길이 m이 주어진다. (1 <=n, m <= 1,000)
- 두 번째 줄부터 n + 1 번째 줄까지 얼음 틀의 형태가 주어진다.
- 이때 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1이다.

출력조건 :
- 한 번에 만들 수 있는 아이스크림의 개수를 출력한다.
"""

# n, m을 공백을 구분하여 입력 받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력 받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))


# DFS를 통해 특정 노드 방문 뒤 연결된 모든 노드 방문
def dfs(x, y):
    # 주어진 맵의 크기를 벗어나면 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드가 방문되지 않은 노드라면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 해당 노드의 상,하,좌,우에 위치한 노드들도 모두 재귀적으로 호출하여 방문처리(방문 하지 않았다면)
        dfs(x-1, y)
        dfs(x+1, y)
        dfs(x, y-1)
        dfs(y, y+1)
        return True
    return False

# 모든 노드에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        if dfs(i, j) == True: # 인접 노드를 모두 음료수로 채우고 더 이상 연결된 노드 중 방문하지 않은 곳이 없다면
                              # ( 구멍이 뚫린 부분을 다 채웠고 다른 인접 노드들은 칸막이로 막혀있다면 )
            result += 1

print(result)
